

  #columns_from_model :exclude => [:barcode], :headers => ["Account","gelockt?"]
  #column 0, "Account", :string, :text, :map=>1, :to => 1
  #map 2, :progress :to => [1, :text]

# request types

# ideas from shoes
  class Controller
    route /return\/(\d+)/, :add_user
  end



# OBSERVE STUFF
  @c.observe_User { |user| button.tool_tip = ComputerHelper.user_list_format(user) }
  tool_tip_observe @c, :User, :via=> :user_list_format
  background_observe "/computer/#{@c.Cname}/Color", :via=> :code_to_color
  
#buttons/actions/links
  click "/computers/cbutton_click/#{@c.id}"

  button :ok   # default stock
  button "ok"  # text

  button.click :symbol                   # fastest (GET?)
  button.click :symbol, args             # fastest (POST?)
  button.click "/uri/to/action/" args    # link to other controller 
  button.click { block }                 # direct for simple view actions  

  button :ok, :click => :sym/"uri"
  button :ok do
    click {}/:sym/"uri"
  end
  click "/computers/cbutton_click/#{@c.id}"


# dnd
  drag {}                       # block result
  drag args                     # direct data
  drag method, args             # filter through  method
  drop {|data| @text = data }   # block
  drop method, args             # 
  drag_clear "/#{@c.id}/key_clear/"


image "uri"


#QCompleter
#wordList << "alpha" << "omega" << "omicron" << "zeta"
#lineEdit = QLineEdit.new
#completer = QCompleter.new(wordList, this)
#completer.case_sensitivity = Qt::CaseInsensitive
#lineEdit.setCompleter(completer)


# require 'rubygems'
# require 'rbus'
# notifier = RBus.session_bus.get_object('org.freedesktop.Notifications', '/org/freedesktop/Notifications')
# notifier.Notify('R-Bus',0,'info','R-Bus Notification', 'A test example to see that everything works.',[],{},-1)


#  def click_gl_demo(w)
#    @part ||= part :add
#    @part.show_all
#  end

#  def open_action(w, mode)
#    @files = open(mode)
#    puts @files
#  end

    #svg :file=> "test.svg"
    
          #column 1, :ProgressBar, :filter=>:test_filter
          
#        tab_title "&TestTab"
#        group "playground", :radio=>true do
#          stack do
#              button "undo", :click => :undo_action
#              button "gl demo", :click => :click_gl_demo
#              button("open files") { click :open_action, :files }

#              @slider = hslider :min=> -100
#              @spin = spin { value_observe @slider, :value }
#              @slider.value_observe  @spin, :value     
#              radio "test2"
#              check "test3"
#              stretch
#          end
#        end

# automatic doc
autodoc :style => :float do
  desc "SDSDSDSD"
  window do
    button
  end
end
> this will generate a GUI image with text beside it


# resouce checksums?




# dock :all
# image 'bla.jpg'
# image <resource>

#text_observe @main, :account_text
#observe  @parent, :text, @main, :account_text, :filter=>:test


#TODO: remove need for add_events
#  def add_events
#    clicked ['c81', 'c82'] do |s|
#     Base.log.info "click0r"
#     @main.account_text = "aaa"
#    end

    # default should be: feld1_return

#    respond :to => [:return] ,:id => [:feld1] do 
#    end

#    respond :to => [:changed], :id => [:feld1] do | w, e |
#      @app.name = w.text
#    end
 
#  observe: '@adm.name' do ||
#  @adm.on_name_changed do ||
#    adm_name_update??????
#  end

#link_to ist hier clicked?
# render stuff muss in controller.create

      table :id => :test_table do
#        format :account, :image, :via => :acc_img
#        format :locked, :boolean
      end


# funzt in activerecord geil
name_changed
name_was


need i18n from active_support

views/
  app_view
  computer_view(view button)
  _cluster_view
  accout/
    acc_add_view
    acc_remove_view

controllers/
  app
  computer
  account
  printer
  notify
models/
  computer
  account
  printer (activecups<activeresource)
  notify
  
