{"body":"\r\nAppetizr (aka indigo) - (rapid) application framework inspired by RoR and Shoes\r\n\r\nUSAGE OF DEMO APP/FRAMEWORK\r\n* 'rake db:migrate'\r\n* 'bin/start'\r\n\r\nDifferences to Rails\r\n1. Appetizr is not RAILS\r\n2. Appetizr uses multiple databases by default so\r\n    schema.rb is db/schemas/db_name.rb\r\n    migrations is db/migration/db_name/[0-9]*_*.rb\r\n3. explicit rather then implicit render\r\n4. controller generates gui directly\r\n5. besides indirect/dispatched action calls, direct action calls are also possible\r\n6. more \r\n\r\n\r\nAppetizr uses ...\r\n  ... a DSL to create/format view similar to the DSL of shoes ( http://github.com/why/shoes/ ).\r\n  ... active_support for nice ruby extensions and I18n\r\n  ... active_record/resource for db and webservice access\r\n  ... gtk2 for the underlying widget rendering\r\n  ... rubigen to create app templaes\r\n  ... some other extensions (dbus) and ideas from RoR\r\n \r\n\r\nHow it should work(but does not right now):\r\n  appetize my_app\r\n  cd my_app\r\n  script/generate window/model/controller .. create models and views\r\n  bin/start ... test\r\n  rake appetize  (-> create app + installer)\r\n  \r\n  \r\nSimple Controller\r\n\r\nclass SimpleController  < Indigo::Controller\r\n\r\n  def show\r\n    render do\r\n      window {\r\n        @text = label \"Hallo Wald!\"\r\n        button(:ok).click { @text.text= \"Hallo Wurst!\" }\r\n        end\r\n      }\r\n    end.show_all\r\n  end\r\n\r\nend  \r\n","tagline":"Rails meets shoes and some_gui - An MVC approach inspired by RoR ","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Appetizr","google":""}